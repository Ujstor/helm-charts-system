{{- $secretStoreKind := ternary "ClusterSecretStore" "SecretStore" .Values.secretStore.clusterWide -}}
apiVersion: external-secrets.io/v1beta1
kind: {{ $secretStoreKind }}
metadata:
  name: {{ include "secret-store.fullname" . }}
  {{- if not .Values.secretStore.clusterWide }}
  namespace: {{ .Release.Namespace }}
  {{- end }}
  labels:
    {{- include "secret-store.labels" . | nindent 4 }}
  {{- with .Values.secretStore.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.secretStore.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if eq .Values.secretStore.provider.type "kubernetes" }}
  provider:
    kubernetes:
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          namespace: kube-system
      remoteNamespace: {{ .Values.secretStore.provider.kubernetes.remoteNamespace | default .Release.Namespace }}
      {{- if .Values.secretStore.provider.kubernetes.auth.serviceAccount.create }}
      auth:
        serviceAccount:
          name: {{ .Values.secretStore.provider.kubernetes.auth.serviceAccount.name | default (include "secret-store.fullname" .) }}
      {{- end }}
  {{- else if eq .Values.secretStore.provider.type "aws" }}
  provider:
    aws:
      service: SecretsManager
      region: {{ .Values.secretStore.provider.aws.region }}
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: {{ .Values.secretStore.provider.aws.auth.secretName }}
            key: access-key-id
          secretAccessKeySecretRef:
            name: {{ .Values.secretStore.provider.aws.auth.secretName }}
            key: secret-access-key
  {{- else if eq .Values.secretStore.provider.type "vault" }}
  provider:
    vault:
      server: {{ .Values.secretStore.provider.vault.server }}
      path: {{ .Values.secretStore.provider.vault.path }}
      auth:
        tokenSecretRef:
          name: {{ .Values.secretStore.provider.vault.auth.secretName }}
          key: token
  {{- end }}
