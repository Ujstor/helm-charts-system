---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "{{ .Release.Namespace }}-minio-external-secret"
  namespace: {{ .Release.Namespace }}
spec:
  secretStoreRef:
    name: "{{ .Release.Name }}-secret-store"
    kind: SecretStore
  target:
    name: minio-admin-secret
    creationPolicy: Owner
    deletionPolicy: Delete
    template:
      engineVersion: v2
      data:
        config.env: |-
          export MINIO_ROOT_USER="root"
          export MINIO_ROOT_PASSWORD="{{ `{{ .password }}` }}"
  data:
  - secretKey: password
    remoteRef:
      key: "random-minio-password-secret"
      property: password
---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-generate-random-secret
spec:
  template:
    spec:
      containers:
      - name: secret-generator
        image: bitnami/kubectl
        command:
        - /bin/sh
        - -c
        - |
          if ! kubectl get secret random-minio-password-secret &>/dev/null; then
            RANDOM_VALUE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
            kubectl create secret generic random-minio-password-secret --from-literal=password="$RANDOM_VALUE"
            echo "Secret created successfully"
          else
            echo "Secret already exists, skipping creation"
          fi
      serviceAccountName: {{ .Release.Name }}-secret-creator
      restartPolicy: Never
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-secret-creator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-secret-creator
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-creator
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-secret-creator
roleRef:
  kind: Role
  name: {{ .Release.Name }}-secret-creator
  apiGroup: rbac.authorization.k8s.io

